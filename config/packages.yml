---
- git:
    uri: https://github.com/nvim-treesitter/nvim-treesitter
  vals:
    ts_opts:
      ensure_installed: all
      highlight:
        enable: True
      indent:
        enable: True
      incremental_selection:
        enable: True
        keymaps:
          init_selection: "go"
          node_incremental: "+"
          scope_incremental: "-"
          node_decremental: ""
  lua: |-
    require'nvim-treesitter.configs'.setup(vim.g.ts_opts)

- git:
    uri: https://github.com/neovim/nvim-lspconfig

- git:
    uri: https://github.com/ms-jpq/chadtree
    script:
      body: |-
        python3 -m chadtree deps
  keys:
    - modes: n
      maps:
        "<leader>v": "<cmd>CHADopen<cr>"

# - git:
#     uri: https://github.com/ms-jpq/kok.nvim
#   vals:
#     kok_settings:
#       sources:
#         lsp:
#           enabled: true
#   lua: |-
#     -- vim.o.completefunc = "KoKomnifunc"

- git:
    uri: https://github.com/junegunn/fzf

- git:
    uri: https://github.com/junegunn/fzf.vim
  vals:
    fzf_buffers_jump: True
    fzf_preview_window: right:wrap
    fzf_layout:
      window:
        width: 0.9
        height: 0.9
  keys:
    - modes: n
      maps:
        "<leader>o": "<cmd>BLines<cr>"
        "<leader>P": "<cmd>Files<cr>"
    - modes: n
      opts:
        silent: False
      maps:
        "<leader>O": ":Rg "
  lua: |-
    local fzf_opts = vim.env.FZF_DEFAULT_OPTS
    local new_opts = (fzf_opts or "") .. " --no-border"
    vim.env.FZF_DEFAULT_OPTS = new_opts

- git:
    uri: https://github.com/nvim-lua/plenary.nvim

- git:
    uri: https://github.com/nvim-lua/popup.nvim

- git:
    uri: https://github.com/nvim-telescope/telescope.nvim
  vals:
    telescope:
      defaults:
        prompt_position: top
        width: 0.95
  keys:
    - modes: n
      maps:
        "<leader>p": "<cmd>lua require'telescope.builtin'.buffers{}<cr>"

        # "<leader>O": "<cmd>lua require'telescope.builtin'.live_grep{}<cr>"
        "<leader>d": "<cmd>lua require'telescope.builtin'.lsp_document_symbols{}<cr>"
        "<leader>D": "<cmd>lua require'telescope.builtin'.lsp_workspace_symbols{}<cr>"
  lua: |-
    local tele = require "telescope"
    tele.setup(vim.g.telescope)

- git:
    uri: https://github.com/glepnir/lspsaga.nvim
  keys:
    - modes: n
      maps:
        "R": "<cmd>Lspsaga rename<cr>"
        "K": "<cmd>Lspsaga hover_doc<cr>"
        "H": "<cmd>Lspsaga preview_definition<cr>"

        # "<c-f>": "<cmd>lua require'lspsaga.action'.smart_scroll_with_saga(1)<cr>"
        # "<c-b>": "<cmd>lua require'lspsaga.action'.smart_scroll_with_saga(-1)<cr>"

        "L": "<cmd>Lspsaga show_line_diagnostics<cr>"
        "g[": "<cmd>Lspsaga diagnostic_jump_prev<cr>"
        "g]": "<cmd>Lspsaga diagnostic_jump_next<cr>"

        "go": "<cmd>Lspsaga signature_help<cr>"

        "gh": "<cmd>Lspsaga lsp_finder<cr>"
        "gw": "<cmd>Lspsaga code_action<cr>"
        "gW": "<cmd>Lspsaga range_code_action<cr>"

- git:
    uri: https://github.com/kosayoda/nvim-lightbulb
  viml: |-
    autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()

- git:
    uri: https://github.com/sainnhe/edge
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
  viml: |-
    set background=light
    colorscheme edge

- git:
    uri: https://github.com/itchyny/lightline.vim
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
    lightline:
      colorscheme: edge
      component:
        sep: "-"
      component_function:
        tabsize: LightLineTabSize
        lsp_srvs: LightLineLSPsrvs
        lsp_warn: LightLineLSPwarn
        lsp_err: LightLineLSPerr
      active:
        right:
          - - lineinfo
          - - percent
          - - tabsize
            - filetype
          - - sep
          - - lsp_srvs
            - lsp_err
            - lsp_warn
  lua: |-
    lv = lv or {}
    local buf_diagnostics_count = function (level)
      local clients = vim.lsp.buf_get_clients(0)
      local tot = 0
      for _, client in ipairs(clients) do
        local count = vim.lsp.diagnostic.get_count(0, level, client.id)
        tot = tot + count
      end
      return  tot
    end
    lv.light_line_errors = function ()
      local count = buf_diagnostics_count("Error")
      return count > 0 and "⛔️ [" .. count .. "]" or ""
    end
    lv.light_line_warnings = function ()
      local count = buf_diagnostics_count("Warning")
      return count > 0 and "⚠️  [" .. count .. "]" or ""
    end
    lv.light_line_lsp_servers = function ()
      local clients = vim.lsp.buf_get_clients(0)
      local names = {}
      for _, client in ipairs(clients) do
        table.insert(names, client.name)
      end
      return table.concat(names, ", ")
    end
  viml: |-
    function LightLineLSPsrvs()
      return v:lua.lv.light_line_lsp_servers()
    endfunction
    function LightLineLSPwarn()
      return v:lua.lv.light_line_errors()
    endfunction
    function LightLineLSPerr()
      return v:lua.lv.light_line_warnings()
    endfunction
    function LightLineTabSize()
      if &expandtab
        return 'tabs ' . &tabstop
      else
        return 'spaces ' . &tabstop
      endif
    endfunction

- git:
    uri: https://github.com/liuchengxu/vim-which-key
  keys:
    - modes: n
      maps:
        "<leader>": "<cmd>WhichKey '<space>'<cr>"
        "[": "<cmd>WhichKey '['<cr>"
        "]": "<cmd>WhichKey ']'<cr>"

- git:
    uri: https://github.com/wellle/targets.vim

- git:
    uri: https://github.com/tpope/vim-repeat

- git:
    uri: https://github.com/tpope/vim-surround

- git:
    uri: https://github.com/tpope/vim-commentary

- git:
    uri: https://github.com/junegunn/vim-easy-align
  keys:
    - modes: nv
      opts:
        noremap: False
      maps:
        "ga": "<plug>(EasyAlign)"

- git:
    uri: https://github.com/tpope/vim-unimpaired

- git:
    uri: https://github.com/mhinz/vim-signify

- git:
    uri: https://github.com/sheerun/vim-polyglot
  viml: |-
    let g:polyglot_disabled = ['sensible']

- git:
    uri: https://github.com/jpalardy/vim-slime
  vals:
    slime_target: tmux
    slime_no_mappings: True
    slime_default_config:
      socket_name: default
      target_pane: "{last}"
    slime_cell_delimiter: "# @@"
  keys:
    - modes: n
      opts:
        noremap: False
      maps:
        "<leader>s": "<Plug>SlimeSendCell"
    - modes: v
      opts:
        noremap: False
      maps:
        "<leader>s": "<Plug>SlimeRegionSend"
  viml: |-
    let g:slime_paste_file = tempname()

- git:
    uri: https://github.com/norcalli/nvim-colorizer.lua
  lua: |-
    local go, colourizer = pcall(require, "colorizer")
    if go then
      colourizer.setup()
    end
