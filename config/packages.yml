---
- git:
    uri: https://github.com/neovim/nvim-lspconfig

- git:
    uri: https://github.com/ms-jpq/chadtree
    script:
      body: |-
        python3 -m chadtree deps
  keys:
    - modes: n
      maps:
        "<leader>v": "<cmd>CHADopen<cr>"

# - git:
#     uri: https://github.com/ms-jpq/kok.nvim
#   vals:
#     kok_settings:
#       sources:
#         lsp:
#           enabled: true
#   lua: |-
#     -- vim.o.completefunc = "KoKomnifunc"

- git:
    uri: https://github.com/junegunn/fzf

- git:
    uri: https://github.com/junegunn/fzf.vim
  vals:
    fzf_buffers_jump: True
    fzf_preview_window: right:wrap
    fzf_layout:
      window:
        width: 0.9
        height: 0.9
  keys:
    - modes: n
      maps:
        "<leader>o": "<cmd>BLines<cr>"
    - modes: n
      opts:
        silent: False
      maps:
        "<leader>O": ":Rg "
  lua: |-
    local fzf_opts = vim.api.nvim_call_function("getenv", {"FZF_DEFAULT_OPTS"})
    local new_opts = (fzf_opts or "") .. " --no-border"
    vim.api.nvim_call_function("setenv", {"FZF_DEFAULT_OPTS", new_opts})

- git:
    uri: https://github.com/nvim-lua/plenary.nvim

- git:
    uri: https://github.com/nvim-lua/popup.nvim

- git:
    uri: https://github.com/nvim-telescope/telescope.nvim
  vals:
    telescope:
      defaults:
        prompt_position: top
        width: 0.95
  keys:
    - modes: n
      maps:
        "<leader>p": "<cmd>lua require'telescope.builtin'.buffers{}<cr>"
        "<leader>P": "<cmd>lua require'telescope.builtin'.find_files{}<cr>"

        # "<leader>O": "<cmd>lua require'telescope.builtin'.live_grep{}<cr>"
        "<leader>d": "<cmd>lua require'telescope.builtin'.lsp_document_symbols{}<cr>"
        "<leader>D": "<cmd>lua require'telescope.builtin'.lsp_workspace_symbols{}<cr>"
  lua: |-
    local tele = require "telescope"
    tele.setup(vim.g.telescope)

- git:
    uri: https://github.com/glepnir/lspsaga.nvim
  keys:
    - modes: n
      maps:
        "R": "<cmd>Lspsaga rename<cr>"
        "K": "<cmd>Lspsaga hover_doc<cr>"
        "H": "<cmd>Lspsaga preview_definition<cr>"

        # "<c-f>": "<cmd>lua require'lspsaga.action'.smart_scroll_with_saga(1)<cr>"
        # "<c-b>": "<cmd>lua require'lspsaga.action'.smart_scroll_with_saga(-1)<cr>"

        "L": "<cmd>Lspsaga show_line_diagnostics<cr>"
        "g[": "<cmd>Lspsaga diagnostic_jump_prev<cr>"
        "g]": "<cmd>Lspsaga diagnostic_jump_next<cr>"

        "go": "<cmd>Lspsaga signature_help<cr>"

        "gh": "<cmd>Lspsaga lsp_finder<cr>"
        "gw": "<cmd>Lspsaga code_action<cr>"
        "gW": "<cmd>Lspsaga range_code_action<cr>"

- git:
    uri: https://github.com/kosayoda/nvim-lightbulb
  viml: |-
    autocmd CursorHold,CursorHoldI * lua require'nvim-lightbulb'.update_lightbulb()

- git:
    uri: https://github.com/sainnhe/edge
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
  viml: |-
    set background=light
    colorscheme edge

- git:
    uri: https://github.com/itchyny/lightline.vim
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
    lightline:
      colorscheme: edge
      component_function:
        tabsize: LightLineTabSize
        lsp_warn: LightLineLSPwarn
        lsp_err: LightLineLSPerr
      active:
        right:
          - - lineinfo
          - - percent
          - - lsp_warn
            - lsp_err
            - tabsize
            - filetype
  lua: |-
    lv = lv or {}
    lv.buf_diagnostics_count = function (level)
      local clients = vim.lsp.buf_get_clients(0)
      local tot = 0
      for _, client in ipairs(clients) do
        local count = vim.lsp.diagnostic.get_count(0, level, client.id)
        tot = tot + count
      end
      return tot
    end
  viml: |-
    function LightLineLSPwarn()
      return v:lua.lv.buf_diagnostics_count(1)
    endfunction
    function LightLineLSPerr()
      return v:lua.lv.buf_diagnostics_count(2)
    endfunction
    function LightLineTabSize()
      if &expandtab
        return 'tabs ' . &tabstop
      else
        return 'spaces ' . &tabstop
      endif
    endfunction

- git:
    uri: https://github.com/liuchengxu/vim-which-key
  keys:
    - modes: n
      maps:
        "<leader>": "<cmd>WhichKey '<space>'<cr>"
        "[": "<cmd>WhichKey '['<cr>"
        "]": "<cmd>WhichKey ']'<cr>"

- git:
    uri: https://github.com/wellle/targets.vim

- git:
    uri: https://github.com/tpope/vim-repeat

- git:
    uri: https://github.com/tpope/vim-surround

- git:
    uri: https://github.com/tpope/vim-commentary

- git:
    uri: https://github.com/junegunn/vim-easy-align
  keys:
    - modes: nv
      opts:
        noremap: False
      maps:
        "ga": "<plug>(EasyAlign)"

- git:
    uri: https://github.com/tpope/vim-unimpaired

- git:
    uri: https://github.com/airblade/vim-gitgutter
  viml: :GitGutterLineNrHighlightsEnable

- git:
    uri: https://github.com/sheerun/vim-polyglot
  keys:
    - modes: n
      opts:
        noremap: False
      maps:
        "[c": "<Plug>(GitGutterPrevHunk)"
        "]c": "<Plug>(GitGutterNextHunk)"

  viml: |-
    let g:polyglot_disabled = ['sensible']

- git:
    uri: https://github.com/norcalli/nvim-colorizer.lua
  lua: |-
    local go, colourizer = pcall(require, "colorizer")
    if go then
      colourizer.setup()
    end
