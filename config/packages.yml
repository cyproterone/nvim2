---
- git:
    uri: https://github.com/neovim/nvim-lspconfig

- git:
    uri: https://github.com/ms-jpq/chadtree
    script:
      body: |-
        python3 -m chadtree deps
  keys:
    - modes: n
      maps:
        "<leader>v": "<cmd>CHADopen<cr>"

# - git:
#     uri: https://github.com/ms-jpq/kok.nvim
#   vals:
#     kok_settings:
#       sources:
#         lsp:
#           enabled: true
#   lua: |-
#     -- vim.o.completefunc = "KoKomnifunc"

- git:
    uri: https://github.com/junegunn/fzf

- git:
    uri: https://github.com/junegunn/fzf.vim
  vals:
    fzf_buffers_jump: True
    fzf_preview_window: right:wrap
    fzf_layout:
      window:
        width: 0.9
        height: 0.9
  keys:
    - modes: n
      maps:
        "<leader>o": "<cmd>BLines<cr>"
        "<leader>p": "<cmd>Buffers<cr>"
        "<leader>P": "<cmd>Files<cr>"
    - modes: n
      opts:
        silent: False
      maps:
        "<leader>O": ":Rg "
  lua: |-
    (function ()
      local fzf_opts = vim.api.nvim_call_function("getenv", {"FZF_DEFAULT_OPTS"})
      local new_opts = (fzf_opts or "") .. " --no-border"
      vim.api.nvim_call_function("setenv", {"FZF_DEFAULT_OPTS", new_opts})
    end)()

- git:
    uri: https://github.com/sainnhe/edge
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
  viml: |-
    set background=light
    colorscheme edge

- git:
    uri: https://github.com/itchyny/lightline.vim
  vals:
    edge_style: neon
    edge_menu_selection_background: purple
    lightline:
      colorscheme: edge
      component_function:
        tabsize: LightLineTabSize
      active:
        right:
          - - lineinfo
          - - percent
          - - tabsize
            - filetype
  viml: |-
    function LightLineTabSize()
      if &expandtab
        return 'tabs ' . &tabstop
      else
        return 'spaces ' . &tabstop
      endif
    endfunction

- git:
    uri: https://github.com/liuchengxu/vim-which-key
  keys:
    - modes: n
      maps:
        "<leader>": "<cmd>WhichKey '<space>'<cr>"
        "[": "<cmd>WhichKey '['<cr>"
        "]": "<cmd>WhichKey ']'<cr>"

- git:
    uri: https://github.com/wellle/targets.vim

- git:
    uri: https://github.com/tpope/vim-repeat

- git:
    uri: https://github.com/tpope/vim-surround

- git:
    uri: https://github.com/tpope/vim-commentary

- git:
    uri: https://github.com/junegunn/vim-easy-align
  keys:
    - modes: nv
      opts:
        noremap: False
      maps:
        "ga": "<plug>(EasyAlign)"

- git:
    uri: https://github.com/tpope/vim-unimpaired

- git:
    uri: https://github.com/airblade/vim-gitgutter

- git:
    uri: https://github.com/sheerun/vim-polyglot
  viml: |-
    let g:polyglot_disabled = ['sensible']

- git:
    uri: https://github.com/norcalli/nvim-colorizer.lua
  lua: |-
    (function ()
      local go, colourizer = pcall(require, "colorizer")
      if go then
        colourizer.setup()
      end
    end)()
